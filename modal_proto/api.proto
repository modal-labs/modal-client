syntax = "proto3";

package modal.client;

import "modal_proto/options.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

enum AppState {
  APP_STATE_UNSPECIFIED = 0;

  // Will be discharged when the client disconnects
  APP_STATE_EPHEMERAL = 1;

  APP_STATE_DETACHED = 2;

  // Will be discharged when overwritten
  APP_STATE_DEPLOYED = 3;

  // Winding down app due to user termination.
  APP_STATE_STOPPING = 4;

  // Stopped
  APP_STATE_STOPPED = 5;

  // App is created and in process of deployment.
  APP_STATE_INITIALIZING = 6;

  // Same as stopped but prevented from being garbage collected
  APP_STATE_DISABLED = 7;
}

enum ClientType {
  CLIENT_TYPE_UNSPECIFIED = 0;
  CLIENT_TYPE_CLIENT = 1;
  CLIENT_TYPE_WORKER = 2 [deprecated=true];
  CLIENT_TYPE_CONTAINER = 3;
  CLIENT_TYPE_SERVER = 4 [deprecated=true];
  CLIENT_TYPE_WEB_SERVER = 5;
}

// Which data format a binary message is encoded with.
enum DataFormat {
  DATA_FORMAT_UNSPECIFIED = 0; // Equivalent to PICKLE in client version 0.52 and earlier.
  DATA_FORMAT_PICKLE = 1; // Cloudpickle
  DATA_FORMAT_ASGI = 2; // "Asgi" protobuf message
}

enum DeploymentNamespace {
  DEPLOYMENT_NAMESPACE_UNSPECIFIED = 0;
  DEPLOYMENT_NAMESPACE_WORKSPACE = 1;
  DEPLOYMENT_NAMESPACE_GLOBAL = 3;
}

enum FileDescriptor {
  FILE_DESCRIPTOR_UNSPECIFIED = 0;
  FILE_DESCRIPTOR_STDOUT = 1;
  FILE_DESCRIPTOR_STDERR = 2;
  FILE_DESCRIPTOR_INFO = 3;
}

enum FunctionCallType {
  FUNCTION_CALL_TYPE_UNSPECIFIED = 0;
  FUNCTION_CALL_TYPE_UNARY = 1;
  FUNCTION_CALL_TYPE_MAP = 2;
}

enum RateLimitInterval {
  RATE_LIMIT_INTERVAL_UNSPECIFIED = 0;
  RATE_LIMIT_INTERVAL_SECOND = 1;
  RATE_LIMIT_INTERVAL_MINUTE = 2;
}

enum TaskState {
  TASK_STATE_UNSPECIFIED = 0;
  TASK_STATE_CREATED = 6;
  TASK_STATE_QUEUED = 1;
  TASK_STATE_WORKER_ASSIGNED = 2;
  TASK_STATE_LOADING_IMAGE = 3;
  TASK_STATE_ACTIVE = 4;
  TASK_STATE_COMPLETED = 5;
  TASK_STATE_CREATING_CONTAINER = 7;
  TASK_STATE_IDLE = 8;
  TASK_STATE_PREEMPTIBLE = 9;
  TASK_STATE_PREEMPTED = 10;
  TASK_STATE_LOADING_CHECKPOINT_IMAGE = 11;
}

enum WebhookType {
  WEBHOOK_TYPE_UNSPECIFIED = 0;
  WEBHOOK_TYPE_ASGI_APP = 1;
  WEBHOOK_TYPE_FUNCTION = 2;
  WEBHOOK_TYPE_WSGI_APP = 3;
}

enum WebhookAsyncMode {
  WEBHOOK_ASYNC_MODE_UNSPECIFIED = 0;
  reserved 1; // unused REDIRECT mode
  WEBHOOK_ASYNC_MODE_DISABLED = 2; // no redirect, fail after timeout
  WEBHOOK_ASYNC_MODE_TRIGGER = 3; // return immediately, roughly same as old wait_for_response=False
  WEBHOOK_ASYNC_MODE_AUTO = 4; // redirect to polling endpoint if execution time nears the http timeout
}

// A web endpoint connection-related message.
//
// Modal's internal web endpoint runtime effectively acts as a global web server
// that schedules requests to tasks that are spawned on-demand, so we need an
// internal protocol to model HTTP requests. This is that protocol.
//
// We base this protocol on Python's ASGI specification, which is a popular
// interface between applications and web servers.
//
// ASGI Spec: https://asgi.readthedocs.io/en/latest/specs/www.html
message Asgi {
  // Message of type "http" (connection scope)
  message Http {
    string http_version = 1;
    string method = 2;
    string scheme = 3;
    string path = 4;
    bytes query_string = 5;
    repeated bytes headers = 6; // Flat list of alternating header names and values
    optional string client_host = 7;
    optional uint32 client_port = 8;
  }

  // Message of type "http.request"
  message HttpRequest {
    bytes body = 1;
    bool more_body = 2;
  }

  // Message of type "http.response.start"
  message HttpResponseStart {
    uint32 status = 1;
    repeated bytes headers = 2; // Flat list of alternating header names and values
    bool trailers = 3;
  }

  // Message of type "http.response.body"
  message HttpResponseBody {
    bytes body = 1;
    bool more_body = 2;
  }

  // Message of type "http.response.trailers"
  message HttpResponseTrailers {
    repeated bytes headers = 1; // Flat list of alternating header names and values
    bool more_trailers = 2;
  }

  // Message of type "http.disconnect"
  message HttpDisconnect {
  }

  oneof type {
    Http http = 1;
    HttpRequest http_request = 2;
    HttpResponseStart http_response_start = 3;
    HttpResponseBody http_response_body = 4;
    HttpResponseTrailers http_response_trailers = 5;
    HttpDisconnect http_disconnect = 6;
  }
}

message AppClientDisconnectRequest {
  string app_id = 1;
}

message AppCreateRequest {
  string client_id = 1 [ (modal.options.audit_target_attr) = true ];
  string description = 2;    // Human readable label for the app
  bool detach = 3 [deprecated=true]; // replaced by app_state in 0.55.3904
  bool initializing = 4 [deprecated=true]; // replaced by app_state in 0.55.3904
  string environment_name = 5;
  AppState app_state = 6;
}

message AppCreateResponse {
  string app_id = 1;
  string app_logs_url = 2;
}

message AppStopRequest {
  string app_id = 1 [ (modal.options.audit_target_attr) = true ];
}

message AppDeployRequest {
  string app_id = 1 [ (modal.options.audit_target_attr) = true ];
  DeploymentNamespace namespace = 2;
  string name = 3;
  string object_entity = 4;
}

message AppDeployResponse {
  string url = 1;
}

message AppDeploySingleObjectRequest {
  string name = 1;
  DeploymentNamespace namespace = 2;
  string environment_name = 3;
  string object_id = 4;
}

message AppDeploySingleObjectResponse {
  string app_id = 1;
}

message AppGetByDeploymentNameRequest {
  DeploymentNamespace namespace = 1;
  string name = 2;
  reserved 3;
  string environment_name = 4;
}

message AppGetByDeploymentNameResponse {
  string app_id = 1;
  string last_log_entry_id = 2; // Last log entry as a starting point for the client.
}

message AppGetLogsRequest {
  string app_id = 1;
  float timeout = 2;
  string last_entry_id = 4;
  string function_id = 5;
  string input_id = 6;
  string task_id = 7;
  FileDescriptor file_descriptor = 8;
}

message AppGetObjectsRequest {
  string app_id = 1;
}

message AppGetObjectsItem {
  string tag = 1;
  string object_id = 2 [deprecated=true]; // needed by 0.51
  oneof handle_metadata_oneof {
    FunctionHandleMetadata function_handle_metadata = 3 [deprecated=true]; // needed by 0.51
    MountHandleMetadata mount_handle_metadata = 4 [deprecated=true]; // needed by 0.51
    ClassHandleMetadata class_handle_metadata = 5 [deprecated=true]; // needed by 0.51
  }
  Object object = 6;
}

message AppGetObjectsResponse {
  repeated AppGetObjectsItem items = 2;
}

message AppStats {
  string app_id = 1;
  string description = 3;
  AppState state = 4;
  double created_at = 5;
  double stopped_at = 6;
  int32 n_running_tasks = 8;
  string object_entity = 9;
  string name = 10;
  string environment_name = 11;
}

message AppListRequest {
  string environment_name = 1;
}

message AppListResponse {
  repeated AppStats apps = 1;
  string environment_name = 2;
}

message AppLookupObjectRequest {
  DeploymentNamespace namespace = 2;
  string app_name = 3;
  string object_tag = 4;
  string object_id = 5;
  string object_entity = 6;
  string environment_name = 7;
}

message AppLookupObjectResponse {
  string object_id = 1 [deprecated=true]; // needed by 0.51
  string error_message = 2 [deprecated=true]; // needed by 0.55
  oneof handle_metadata_oneof {
    FunctionHandleMetadata function_handle_metadata = 3 [deprecated=true]; // needed by 0.51
    MountHandleMetadata mount_handle_metadata = 4 [deprecated=true]; // needed by 0.51
    ClassHandleMetadata class_handle_metadata = 5 [deprecated=true]; // needed by 0.51
  }
  Object object = 6;
  string app_id = 7;
}

message AppSetObjectsRequest {
  string app_id = 1;
  map<string, string> indexed_object_ids = 2;
  string client_id = 3;
  repeated string unindexed_object_ids = 4;
  AppState new_app_state = 5; // promotes an app from initializing to this new state
  string single_object_id = 6;
}

message AppHeartbeatRequest {
  string app_id = 1;
}

message ClassMethod {
  string function_name = 1;
  string function_id = 2;

  // Class methods need to hydrate all functions on the class
  FunctionHandleMetadata function_handle_metadata = 3;
}

message ClassCreateRequest {
  string app_id = 1  [ (modal.options.audit_target_attr) = true ];
  string existing_class_id = 2;
  repeated ClassMethod methods = 3;
}

message ClassCreateResponse {
  string class_id = 1;
  ClassHandleMetadata handle_metadata = 2;
}

message ClassHandleMetadata {
  repeated ClassMethod methods = 1;
}

message EnvironmentCreateRequest {
  string name = 1;
}

message EnvironmentDeleteRequest {
  string name = 1;
}

message EnvironmentListItem {
  string name = 1;
  string webhook_suffix = 2;
}

message EnvironmentListResponse {
  repeated EnvironmentListItem items = 2;
}

message EnvironmentUpdateRequest {
  string current_name = 1;
  google.protobuf.StringValue name = 2;
  google.protobuf.StringValue web_suffix = 3;
}

enum RegistryType {
  DOCKERHUB = 0;
  ECR = 1;
  GCP_ARTIFACT_REGISTRY = 2;
}

message ImageRegistryConfig {
  RegistryType registry_type = 1;
  string secret_id = 2;
}

message BaseImage {
  string image_id = 1;
  string docker_tag = 2;
  reserved 4;
}

message BlobCreateRequest {
  // TODO(erikbern): how are these garbage collected?
  // Shouldn't they belong to an app?
  string content_md5 = 1;
  string content_sha256_base64 = 2;
  int64 content_length = 3;
}

message MultiPartUpload {
  int64 part_length = 1; // split upload based on this part length - all except the last part must have this length
  repeated string upload_urls = 2;
  string completion_url = 3;
}

message BlobCreateResponse {
  string blob_id = 2;
  oneof upload_type_oneof {
    string upload_url = 1;
    MultiPartUpload multipart = 3;
  }
}

message BlobGetRequest {
  string blob_id = 1;
}

message BlobGetResponse {
  string download_url = 1;
}

message ClientCreateRequest {
  ClientType client_type = 1  [ (modal.options.audit_target_attr) = true ];
  string version = 2;
}

message ClientCreateResponse {
  string client_id = 1;
  string error = 2;
  string deprecation_warning = 3;
}

message ClientHelloResponse {
  string warning = 1;
}

message ClientHeartbeatRequest {
  string client_id = 1;
  string current_input_id = 3;
  double current_input_started_at = 4;
}

message ContainerArguments {  // This is used to pass data from the worker to the container
  string task_id = 1;
  string function_id = 2;
  string app_id = 4;
  Function function_def = 7;
  ProxyInfo proxy_info = 8;
  map<string, string> tracing_context = 9;
  bytes serialized_params = 10;
  string runtime = 11;
  string environment_name = 13;
}

message ContainerHeartbeatRequest {
  string current_input_id = 1;
  double current_input_started_at = 2;
}

message ContainerCheckpointRequest {}

message DictClearRequest {
  string dict_id = 1;
}

message DictContainsRequest {
  string dict_id = 1;
  bytes key = 2;
}

message DictContainsResponse {
  bool found = 1;
}

message DictCreateRequest {
  repeated DictEntry data = 1;
  string app_id = 2  [ (modal.options.audit_target_attr) = true ];
  string existing_dict_id = 3;
}

message DictCreateResponse {
  string dict_id = 1;
}

message DictEntry {
  bytes key = 1;
  bytes value = 2;
}

message DictGetRequest {
  string dict_id = 1;
  bytes key = 2;
}

message DictGetResponse {
  bool found = 1;
  optional bytes value = 2;
}

message DictLenRequest {
  string dict_id = 1;
}

message DictLenResponse {
  int32 len = 1;
}

message DictPopRequest {
  string dict_id = 1;
  bytes key = 2;
}

message DictPopResponse {
  bool found = 1;
  optional bytes value = 2;
}

message DictUpdateRequest {
  string dict_id = 1;
  repeated DictEntry updates = 2;
}

message DictUpdateResponse {
}

enum DNSRecordType {
  DNS_RECORD_TYPE_A = 0;
  DNS_RECORD_TYPE_TXT = 1;
  DNS_RECORD_TYPE_CNAME = 2;
}

message DNSRecord {
  DNSRecordType type = 1;
  string name = 2;
  string value = 3;
}

message DomainCreateRequest {
  string domain_name = 1  [ (modal.options.audit_target_attr) = true ];
}

message DomainCreateResponse {
  string domain_id = 1;
  repeated DNSRecord dns_records = 2;
}

message DomainListRequest {
}

enum CertificateStatus {
  CERTIFICATE_STATUS_PENDING = 0;
  CERTIFICATE_STATUS_ISSUED = 1;
  CERTIFICATE_STATUS_FAILED = 2;
  CERTIFICATE_STATUS_REVOKED = 3;
}

message Domain {
  string domain_id = 1;
  string domain_name = 2;
  double created_at = 3;
  CertificateStatus certificate_status = 4;
  repeated DNSRecord dns_records = 5;
};

message DomainListResponse {
  repeated Domain domains = 1;
}

message DomainCertificateVerifyRequest {
  string domain_id = 1;
}

message DomainCertificateVerifyResponse {
  Domain domain = 1;
}

message PTYInfo {
  bool enabled = 1;  // Soon deprecated
  uint32 winsz_rows = 2;
  uint32 winsz_cols = 3;
  string env_term = 4;
  string env_colorterm = 5;
  string env_term_program = 6;
  enum PTYType {
    PTY_TYPE_UNSPECIFIED = 0;  // Nothing
    PTY_TYPE_FUNCTION = 1;  // Run function in PTY
    PTY_TYPE_SHELL = 2;  // Replace function with shell
  }
  PTYType pty_type = 7;
}

enum CheckpointStatus {
  CHECKPOINT_STATUS_UNSPECIFIED = 0;
  CHECKPOINT_STATUS_PENDING = 1;
  CHECKPOINT_STATUS_PROCESSING = 2;
  CHECKPOINT_STATUS_READY = 3;
  CHECKPOINT_STATUS_FAILED = 4;
}

message ObjectDependency {
  string object_id = 1;
}

message Function {
  string module_name = 1;
  string function_name = 2;
  repeated string mount_ids = 3;
  string image_id = 4;
  bytes function_serialized = 6;

  enum DefinitionType {
    DEFINITION_TYPE_UNSPECIFIED = 0;
    DEFINITION_TYPE_SERIALIZED = 1;
    DEFINITION_TYPE_FILE = 2;
  }
  DefinitionType definition_type = 7;

  enum FunctionType {
    FUNCTION_TYPE_UNSPECIFIED = 0;
    FUNCTION_TYPE_GENERATOR = 1;
    FUNCTION_TYPE_FUNCTION = 2;
  }
  FunctionType function_type = 8;

  Resources resources = 9;
  repeated string secret_ids = 10;

  RateLimit rate_limit = 11;
  WebhookConfig webhook_config = 15;

  repeated SharedVolumeMount shared_volume_mounts = 16;

  optional string proxy_id = 17;

  FunctionRetryPolicy retry_policy = 18;

  uint32 concurrency_limit = 19;

  bool keep_warm = 20;

  uint32 timeout_secs = 21;

  PTYInfo pty_info = 22;
  bytes class_serialized = 23;

  uint32 task_idle_timeout_secs = 25;

  CloudProvider cloud_provider = 26;

  uint32 warm_pool_size = 27;

  string web_url = 28;
  WebUrlInfo web_url_info = 29;

  // If set, overrides the runtime used by the function, either "runc" or "gvisor".
  string runtime = 30;

  string stub_name = 31;

  repeated VolumeMount volume_mounts = 33;

  uint32 allow_concurrent_inputs = 34;

  repeated CustomDomainInfo custom_domain_info = 35;

  string worker_id = 36; // For internal debugging use only.

  bool runtime_debug = 37; // For internal debugging use only.

  // TODO: combine into enum?
  bool is_builder_function = 32;
  bool is_auto_snapshot = 38;
  bool is_method = 39;
  bool is_checkpointing_function = 40;

  // Checkpoint and restore

  bool checkpointing_enabled = 41;

  message CheckpointInfo {
    string checksum = 1;
    CheckpointStatus status = 2;
  }
  CheckpointInfo checkpoint = 42;
  repeated ObjectDependency object_dependencies = 43;
}

message FunctionHandleMetadata {
  // contains all the info about a function that is needed to trigger the right
  // behaviour when using a FunctionHandler. Notably excludes things purely
  // used for *executing* the function in a container entrypoint

  // Should be a subset and use IDs/types from `Function` above
  string function_name = 2;
  Function.FunctionType function_type = 8;
  string web_url = 28;
  bool is_method = 39;
}

message FunctionCreateRequest {
  Function function = 1;
  string app_id = 2  [ (modal.options.audit_target_attr) = true ];
  Schedule schedule = 6;
  string existing_function_id = 7;
}

message FunctionPrecreateRequest {
  string app_id = 1;
  string function_name = 2  [ (modal.options.audit_target_attr) = true ];
  string existing_function_id = 3;
  Function.FunctionType function_type = 4;
  WebhookConfig webhook_config = 5;
}

message FunctionPrecreateResponse {
  string function_id = 1;
  FunctionHandleMetadata handle_metadata = 2;
}

message FunctionBindParamsRequest {
  string function_id = 1;
  bytes serialized_params = 2;
}

message FunctionBindParamsResponse {
  string bound_function_id = 1;
  FunctionHandleMetadata handle_metadata = 2;
}

message FunctionCreateResponse {
  string function_id = 1;
  string web_url = 2;  // Deprecated - needed until 0.51 is the minimum version
  WebUrlInfo web_url_info = 3;  // Deprecated - needed until 0.51 is the minimum version
  Function function = 4;
  FunctionHandleMetadata handle_metadata = 5;
}

message FunctionGetInputsItem {
  string input_id = 1;
  FunctionInput input = 2;
  bool kill_switch = 3;
  reserved 4; // previously used
}

message FunctionGetInputsRequest {
  string function_id = 1;
  int32 max_values = 3;
  float average_call_time = 5;
  int32 input_concurrency = 6; // Container aims to fetch multiple inputs at the same time
}

message FunctionGetInputsResponse {
  repeated FunctionGetInputsItem inputs = 3;
  float rate_limit_sleep_duration = 4; // How long to sleep before requesting another input.
}

message FunctionGetOutputsItem {
  GenericResult result = 1;
  int32 idx = 2;
  string input_id = 3;
  int32 gen_index = 4;
  DataFormat data_format = 5; // for result.data_oneof
}

message FunctionGetOutputsRequest {
  string function_call_id = 1;
  int32 max_values = 2;
  float timeout = 3;
  string last_entry_id = 6;
  bool clear_on_success = 7; // expires *any* remaining outputs soon after this call, not just the returned ones
}

message FunctionGetOutputsResponse {
  repeated int32 idxs = 3;
  repeated FunctionGetOutputsItem outputs = 4;
  string last_entry_id = 5;
}

message FunctionGetSerializedRequest {
  string function_id = 1;
}

message FunctionGetSerializedResponse {
  bytes function_serialized = 1;
  bytes class_serialized = 2;
}

message FunctionInput {
  // serialized (args, kwargs).
  oneof args_oneof {
    bytes args = 1;
    string args_blob_id = 7;
  }
  bool final_input = 9;
  DataFormat data_format = 10; // For args_oneof.
}

message FunctionMapRequest {
  string function_id = 1;
  string parent_input_id = 2;
  bool return_exceptions = 3;
  FunctionCallType function_call_type = 4;
}

message FunctionMapResponse {
  string function_call_id = 1;
}

message FunctionPutInputsItem {
  int32 idx = 1;
  FunctionInput input = 2;
}

message FunctionPutInputsRequest {
  string function_id = 1;
  string function_call_id = 3;
  repeated FunctionPutInputsItem inputs = 4;
}

message FunctionPutInputsResponseItem {
  int32 idx = 1;
  string input_id = 2;
}

message FunctionPutInputsResponse {
  repeated FunctionPutInputsResponseItem inputs = 1;
}

message FunctionPutOutputsItem {
  string input_id = 1;
  GenericResult result = 2;
  double input_started_at = 3;
  double output_created_at = 4;
  int32 gen_index = 6; // ordering for generator outputs
  DataFormat data_format = 7; // for result.data_oneof
}

message FunctionPutOutputsRequest {
  repeated FunctionPutOutputsItem outputs = 4;
}

message FunctionRetryPolicy {
  float backoff_coefficient = 1;
  uint32 initial_delay_ms = 2;
  uint32 max_delay_ms = 3;
  // NOTE: two-byte field number not used for special reason. copy-paste error. Ref: PR #2542
  uint32 retries = 18;
}

message FunctionGetCallGraphRequest {
  // TODO: use input_id once we switch client submit API to return those.
  string function_call_id = 2;
}

message InputCallGraphInfo {
  string input_id = 1;
  GenericResult.GenericStatus status = 2;
  string function_call_id = 3;
  string task_id = 4;
}

message FunctionCallCallGraphInfo {
  string function_call_id = 1;
  string parent_input_id = 2;
  string function_name = 3;
  string module_name = 4;
}

message FunctionGetCallGraphResponse {
  repeated InputCallGraphInfo inputs = 1;
  repeated FunctionCallCallGraphInfo function_calls = 2;
}

message FunctionCallCancelRequest {
  string function_call_id = 1;
}

message FunctionCallListRequest {
  string function_id = 1;
}

message InputInfo {
  string input_id = 1;
  int32 idx = 2;
  string task_id = 3;
  double started_at = 4;
  double finished_at = 5;
  double task_startup_time = 6;
  bool task_first_input = 7;
}

message InputCategoryInfo {
  int32 total = 1;
  repeated InputInfo latest = 2;
}

message FunctionCallInfo {
  string function_call_id = 1;
  int32 idx = 2;
  reserved 3, 4, 5; // old fields
  double created_at = 6; // when the call was created
  double scheduled_at = 7; // if cron job, when run was scheduled
  reserved 8, 9, 10, 11;  // old fields
  InputCategoryInfo pending_inputs = 12;
  InputCategoryInfo failed_inputs = 13;
  InputCategoryInfo succeeded_inputs = 14;
  InputCategoryInfo timeout_inputs = 15;
  InputCategoryInfo cancelled_inputs = 16;
  int32 total_inputs = 17;
}

message FunctionCallListResponse {
  repeated FunctionCallInfo function_calls = 1;
}


message FunctionGetCurrentStatsRequest {
  string function_id = 1;
}

message FunctionStats {
  uint32 backlog = 1;
  uint32 num_active_tasks = 2;
  uint32 num_total_tasks = 3;
}

message GenericResult {  // Used for both tasks and function outputs
  enum GenericStatus {
    GENERIC_STATUS_UNSPECIFIED = 0;
    GENERIC_STATUS_SUCCESS = 1;
    GENERIC_STATUS_FAILURE = 2;
    // Used when a task was killed using an external signal.
    GENERIC_STATUS_TERMINATED = 3;
    GENERIC_STATUS_TIMEOUT = 4;
  }

  GenericStatus status = 1;
  string exception = 2;
  int32 exitcode = 3;
  string traceback = 4;

  oneof data_oneof {
    bytes data = 5;
    string data_blob_id = 10;
  }

  enum GeneratorStatus {
    GENERATOR_STATUS_UNSPECIFIED = 0;
    GENERATOR_STATUS_INCOMPLETE = 1;
    GENERATOR_STATUS_COMPLETE = 2;
  }
  GeneratorStatus gen_status = 7;

  bytes serialized_tb = 11;
  bytes tb_line_cache = 12;

  string propagation_reason = 13;
}

message Sandbox {
  repeated string entrypoint_args = 1;
  repeated string mount_ids = 2;
  string image_id = 3;
  repeated string secret_ids = 4;

  Resources resources = 5;
  CloudProvider cloud_provider = 6;

  uint32 timeout_secs = 7;

  optional string workdir = 8;

  repeated SharedVolumeMount nfs_mounts = 9;

  bool runtime_debug = 10; // For internal debugging use only.
}

message SandboxCreateRequest {
  string app_id = 1 [ (modal.options.audit_target_attr) = true ];
  Sandbox definition = 2;
}

message SandboxCreateResponse {
  string sandbox_id = 1;
}

message SandboxWaitRequest {
  string sandbox_id = 1;
  float timeout = 2;
}

message SandboxWaitResponse {
  GenericResult result = 1;
}

message SandboxGetLogsRequest {
  string sandbox_id = 1;
  FileDescriptor file_descriptor = 2;
  float timeout = 3;
  string last_entry_id = 4;
}

message TaskInfo {
  string id = 1;
  double started_at = 2;
  double finished_at = 3;
  modal.client.GenericResult result = 4;
}

message SandboxInfo {
  string id = 1;
  modal.client.Sandbox definition = 2;
  double created_at = 3;
  TaskInfo task_info = 4;
}

message SandboxListRequest {
  string app_id = 1;
  double before_timestamp = 2;
}

message SandboxListResponse {
  repeated SandboxInfo sandboxes = 1;
}

message Image {
  repeated BaseImage base_images = 5;
  repeated string dockerfile_commands = 6;
  repeated ImageContextFile context_files = 7;
  string version = 11;
  repeated string secret_ids = 12;
  // Part of Image definition, because presence of GPU drivers
  // affects the image that's built.
  // Note: field 13 is getting replaced field 16. The client now sends both fields,
  // but the server still only reads field 13.
  bool gpu = 13;
  string context_mount_id = 15;
  GPUConfig gpu_config = 16;
  ImageRegistryConfig image_registry_config = 17;

  string build_function_def = 14;
  bytes build_function_globals = 18;

  // If set, overrides the runtime used by the function. Specify either "runc" or "gvisor".
  string runtime = 19;
  // Not included in image definition checksum as debug features do not affect built image.
  bool runtime_debug = 20;
}

message ImageContextFile {
  string filename = 1;
  bytes data = 2;
}

message ImageGetOrCreateRequest {
  Image image = 2;
  string app_id = 4 [ (modal.options.audit_target_attr) = true ];
  string existing_image_id = 5;  // ignored
  string build_function_id = 6;
  bool force_build = 7;
  DeploymentNamespace namespace = 8;
}

message ImageGetOrCreateResponse {
  string image_id = 1;
}

message ImageJoinStreamingRequest {
  string image_id = 1;
  float timeout = 2;
  string last_entry_id = 3;
}

message ImageJoinStreamingResponse {
  GenericResult result = 1;
  repeated TaskLogs task_logs = 2;
  string entry_id = 3;
  bool eof = 4;
}

message MountBuildRequest {
  string app_id = 2 [ (modal.options.audit_target_attr) = true ];
  string existing_mount_id = 3;
  repeated MountFile files = 4;
}

message MountBuildResponse {
  string mount_id = 1;
  MountHandleMetadata handle_metadata = 2;
}

message MountHandleMetadata {
  string content_checksum_sha256_hex = 1;
}

message MountFile {
  string filename = 1;
  string sha256_hex = 3; // SHA-256 checksum of the file.
  optional uint64 size = 4; // Size of the file in bytes — ignored in MountBuild().
  optional uint32 mode = 5; // Unix file permission bits `st_mode`.
}

message MountPutFileRequest {
  string sha256_hex = 2;

  oneof data_oneof {
    bytes data = 3;
    string data_blob_id = 5;
  }
}

message MountPutFileResponse {
  bool exists = 2;
}

message Object {
  string object_id = 1;
  oneof handle_metadata_oneof {
    FunctionHandleMetadata function_handle_metadata = 3;
    MountHandleMetadata mount_handle_metadata = 4;
    ClassHandleMetadata class_handle_metadata = 5;
  }
}

message ProxyInfo {
  string elastic_ip = 1;
  string proxy_key = 2;
  string remote_addr = 3;
  int32 remote_port = 4;
}

message QueueCreateRequest {
  string app_id = 1;
  string existing_queue_id = 2;
}

message QueueCreateResponse {
  string queue_id = 1;
}

message QueueGetRequest {
  string queue_id = 1;
  float timeout = 3;
  int32 n_values = 4;
}

message QueueGetResponse {
  repeated bytes values = 2;
}

message QueuePutRequest {
  string queue_id = 1;
  repeated bytes values = 4;
}

message QueueLenRequest {
  string queue_id = 1;
}

message QueueLenResponse {
  int32 len = 1;
}

message RateLimit {
  int32 limit = 1;
  RateLimitInterval interval = 2;
}

enum GPUType {
  GPU_TYPE_UNSPECIFIED = 0;
  GPU_TYPE_T4 = 1;
  GPU_TYPE_A100 = 2;
  GPU_TYPE_A10G = 3;
  GPU_TYPE_ANY = 4;
  GPU_TYPE_A100_20G = 5 [deprecated=true];
  GPU_TYPE_A100_40GB_MANY = 6 [deprecated=true];
  GPU_TYPE_INFERENTIA2 = 7;
  GPU_TYPE_A100_80GB = 8;
  GPU_TYPE_L4 = 9;
}

message GPUConfig {
  GPUType type = 1;
  uint32 count = 2;
  uint32 memory = 3;
}

message Resources {
  uint32 memory_mb = 2;
  uint32 milli_cpu = 3;
  GPUConfig gpu_config = 4;
}


enum CloudProvider {
  CLOUD_PROVIDER_UNSPECIFIED = 0;
  CLOUD_PROVIDER_AWS = 1;
  CLOUD_PROVIDER_GCP = 2;
  CLOUD_PROVIDER_AUTO = 3;
  CLOUD_PROVIDER_OCI = 4;
}

message Schedule {
  message Cron {
    string cron_string = 1;
  }
  message Period {
    int32 years = 1;
    int32 months = 2;
    int32 weeks = 3;
    int32 days = 4;
    int32 hours = 5;
    int32 minutes = 6;
    float seconds = 7;
  }
  oneof schedule_oneof {
    Cron cron = 1;
    Period period = 2;
  }
}

message SecretCreateRequest {
  map<string, string> env_dict = 1;
  string app_id = 2 [ (modal.options.audit_target_attr) = true ];
  string template_type = 3;
  string existing_secret_id = 4;
}

message SecretCreateResponse {
  string secret_id = 1;
}


message SecretListItem {
  string label = 1;
  double created_at = 2;
  double last_used_at = 3;
  string environment_name = 4;
}

message SecretListRequest {
  string environment_name = 1; // leaving empty will assume a singular environment
}

message SecretListResponse {
  repeated SecretListItem items = 1;
  string environment_name = 2; // the environment that was listed (useful when relying on "default" logic)
}

message SharedVolumeCreateRequest {
  string app_id = 1 [ (modal.options.audit_target_attr) = true ];
  CloudProvider cloud_provider = 2;
}

message SharedVolumeCreateResponse {
  string shared_volume_id = 1;
}

message SharedVolumeListItem {
  string label = 1;  // app name of object entity app
  string shared_volume_id = 2;
  double created_at = 3;
  CloudProvider cloud_provider = 4;
}

message SharedVolumeListRequest {
  string environment_name = 1;
}

message SharedVolumeListResponse {
  repeated SharedVolumeListItem items = 1;
  string environment_name = 2;
}

message SharedVolumeListFilesRequest {
  string shared_volume_id = 1;
  string path = 2;
}

message SharedVolumePutFileRequest {
  string shared_volume_id = 1 [ (modal.options.audit_target_attr) = true ];
  string path = 2;
  string sha256_hex = 3;
  oneof data_oneof {
    bytes data = 4;
    string data_blob_id = 5;
  }
  bool resumable = 6;  // remove when required client version >= 47
}

message SharedVolumePutFileResponse {
  bool exists = 1;
}

message SharedVolumeGetFileRequest {
  string shared_volume_id = 1;
  string path = 2;
}

message SharedVolumeGetFileResponse {
  oneof data_oneof {
    bytes data = 1;
    string data_blob_id = 2;
  }
}

message SharedVolumeRemoveFileRequest {
  string shared_volume_id = 1 [ (modal.options.audit_target_attr) = true ];
  string path = 2;
  bool recursive = 3;
}

message SharedVolumeListFilesEntry {
  enum FileType {
    UNSPECIFIED = 0;
    FILE = 1;
    DIRECTORY = 2;
  }
  string path = 1;
  FileType type = 2;
}

message SharedVolumeListFilesResponse {
  repeated SharedVolumeListFilesEntry entries = 1;
}

message SharedVolumeMount {
  string mount_path = 1;
  string shared_volume_id = 2;
  CloudProvider cloud_provider = 3;
  bool allow_cross_region = 4;
}

message TaskLogs {
  string data = 1;
  TaskState task_state = 6;
  double timestamp = 7;
  FileDescriptor file_descriptor = 8;
  TaskProgress task_progress = 9;
  string function_call_id = 10;
  string input_id = 11;
}

enum ProgressType {
  IMAGE_SNAPSHOT_UPLOAD = 0;  // TODO(erikbern): shouldn't be zero, and needs prefix
  FUNCTION_QUEUED = 1;  // TODO(erikbern): needs_prefix
}

message TaskProgress {
  uint64 len = 1;
  uint64 pos = 2;
  ProgressType progress_type = 3;
  string description = 4;
}

message TaskLogsBatch {
  string task_id = 1;
  repeated TaskLogs items = 2;
  string entry_id = 5;
  bool app_done = 10;
  string function_id = 11;
  string input_id = 12;
  string image_id = 13;  // Used for image logs
  bool eof = 14;
}

message TaskResultRequest {
  modal.client.GenericResult result = 2;
}

message TokenFlowCreateRequest {
  string node_name = 1 [ (modal.options.audit_target_attr) = true ];
  string platform_name = 2;
  string utm_source = 3;
  int32 localhost_port = 4;
  string next_url = 5;
}

message TokenFlowCreateResponse {
  string token_flow_id = 1;
  string web_url = 2;
  string code = 3;
  string wait_secret = 4;
};

message TokenFlowWaitRequest {
  float timeout = 1;
  string token_flow_id = 2;
  string wait_secret = 3;
}

message TokenFlowWaitResponse {
  string token_id = 1;
  string token_secret = 2;
  bool timeout = 3;
  string workspace_username = 4;
}

message TunnelStartRequest {
  uint32 port = 1;
}

message TunnelStartResponse {
  string host = 1;
}

message TunnelStopRequest {
  uint32 port = 1;
}

message TunnelStopResponse {
  bool exists = 1;
}

message VolumeCreateRequest {
  string app_id = 1 [ (modal.options.audit_target_attr) = true ];
}

message VolumeCreateResponse {
  string volume_id = 1;
}

message VolumeCommitRequest {
  // NOTE(staffan): Mounting a volume in multiple locations is not supported, so volume_id alone uniquely identifies
  // a volume mount.
  string volume_id = 1 [ (modal.options.audit_target_attr) = true ];
}

message VolumeGetFileRequest {
  string volume_id = 1;
  bytes path = 2;
}

message VolumeGetFileResponse {
  oneof data_oneof {
    bytes data = 1;
    string data_blob_id = 2;
  }
}

message VolumeListFilesEntry {
  enum FileType {
    UNSPECIFIED = 0;
    FILE = 1;
    DIRECTORY = 2;
    SYMLINK = 3;
  }
  string path = 1;
  FileType type = 2;
  uint64 mtime = 3;
  uint64 size = 4;
}

message VolumeListFilesRequest {
  string volume_id = 1;
  string path = 2;
}

message VolumeListFilesResponse {
  repeated VolumeListFilesEntry entries = 1;
}

message VolumeListItem {
  string label = 1;  // app name of object entity app
  string volume_id = 2;
  double created_at = 3;
}

message VolumeListRequest {
  string environment_name = 1;
}

message VolumeListResponse {
  repeated VolumeListItem items = 1;
  string environment_name = 2;
}

message VolumeReloadRequest {
  // NOTE(staffan): Mounting a volume in multiple locations is not supported, so volume_id alone uniquely identifies
  // a volume mount.
  string volume_id = 1;
}

message VolumePutFilesRequest {
  string volume_id = 1;
  // TODO(staffan): This is obviously unfortunately named, but provides what we need - consider renaming.
  repeated MountFile files = 2;
}

message VolumeMount {
  string volume_id = 1;
  string mount_path = 2;
}

message CustomDomainConfig {
  string name = 1;
}

message CustomDomainInfo {
  string url = 1;
}

message WebhookConfig {
  WebhookType type = 1;
  string method = 2;
  string requested_suffix = 4;
  WebhookAsyncMode async_mode = 5;
  repeated CustomDomainConfig custom_domains = 6;
}

message WebUrlInfo {
  bool truncated = 1;
  bool has_unique_hash = 2;
  bool label_stolen = 3;
}


service ModalClient {
  // Apps
  rpc AppCreate(AppCreateRequest) returns (AppCreateResponse);
  rpc AppClientDisconnect(AppClientDisconnectRequest) returns (google.protobuf.Empty);
  rpc AppGetLogs(AppGetLogsRequest) returns (stream TaskLogsBatch);
  rpc AppSetObjects(AppSetObjectsRequest) returns (google.protobuf.Empty);
  rpc AppGetObjects(AppGetObjectsRequest) returns (AppGetObjectsResponse);
  rpc AppList(AppListRequest) returns (AppListResponse);
  rpc AppLookupObject(AppLookupObjectRequest) returns (AppLookupObjectResponse);
  rpc AppDeploy(AppDeployRequest) returns (AppDeployResponse);
  rpc AppDeploySingleObject(AppDeploySingleObjectRequest) returns (AppDeploySingleObjectResponse);
  rpc AppGetByDeploymentName(AppGetByDeploymentNameRequest) returns (AppGetByDeploymentNameResponse);
  rpc AppStop(AppStopRequest) returns (google.protobuf.Empty);
  rpc AppHeartbeat(AppHeartbeatRequest) returns (google.protobuf.Empty);

  // Blobs
  rpc BlobCreate(BlobCreateRequest) returns (BlobCreateResponse);
  rpc BlobGet(BlobGetRequest) returns (BlobGetResponse);

  // Classes
  rpc ClassCreate(ClassCreateRequest) returns (ClassCreateResponse);

  // Clients
  rpc ClientCreate(ClientCreateRequest) returns (ClientCreateResponse);
  rpc ClientHello(google.protobuf.Empty) returns (ClientHelloResponse);
  rpc ClientHeartbeat(ClientHeartbeatRequest) returns (google.protobuf.Empty);

  // Container
  rpc ContainerHeartbeat(ContainerHeartbeatRequest) returns (google.protobuf.Empty);

  // Checkpointing
  rpc ContainerCheckpoint(ContainerCheckpointRequest) returns (google.protobuf.Empty);

  // Dicts
  rpc DictClear(DictClearRequest) returns (google.protobuf.Empty);
  rpc DictCreate(DictCreateRequest) returns (DictCreateResponse);
  rpc DictUpdate(DictUpdateRequest) returns (DictUpdateResponse);
  rpc DictGet(DictGetRequest) returns (DictGetResponse);
  rpc DictPop(DictPopRequest) returns (DictPopResponse);
  rpc DictContains(DictContainsRequest) returns (DictContainsResponse);
  rpc DictLen(DictLenRequest) returns (DictLenResponse);

  // Domains
  rpc DomainCreate(DomainCreateRequest) returns (DomainCreateResponse);
  rpc DomainList(DomainListRequest) returns (DomainListResponse);
  rpc DomainCertificateVerify(DomainCertificateVerifyRequest) returns (DomainCertificateVerifyResponse);

  // Environments
  rpc EnvironmentCreate(EnvironmentCreateRequest) returns (google.protobuf.Empty);
  rpc EnvironmentList(google.protobuf.Empty) returns (EnvironmentListResponse);
  rpc EnvironmentDelete(EnvironmentDeleteRequest) returns (google.protobuf.Empty);
  rpc EnvironmentUpdate(EnvironmentUpdateRequest) returns (EnvironmentListItem);

  // Functions
  rpc FunctionBindParams(FunctionBindParamsRequest) returns (FunctionBindParamsResponse);
  rpc FunctionCallCancel(FunctionCallCancelRequest) returns (google.protobuf.Empty);
  rpc FunctionCallList(FunctionCallListRequest) returns (FunctionCallListResponse);
  rpc FunctionCreate(FunctionCreateRequest) returns (FunctionCreateResponse);
  rpc FunctionGetCallGraph(FunctionGetCallGraphRequest) returns (FunctionGetCallGraphResponse);
  rpc FunctionGetCurrentStats(FunctionGetCurrentStatsRequest) returns (FunctionStats);
  rpc FunctionGetInputs(FunctionGetInputsRequest) returns (FunctionGetInputsResponse);  // For containers to request next call
  rpc FunctionGetOutputs(FunctionGetOutputsRequest) returns (FunctionGetOutputsResponse);  // Returns the next result(s) for an entire function call (FunctionMap)
  rpc FunctionGetSerialized(FunctionGetSerializedRequest) returns (FunctionGetSerializedResponse);
  rpc FunctionMap(FunctionMapRequest) returns (FunctionMapResponse);
  rpc FunctionPrecreate(FunctionPrecreateRequest) returns (FunctionPrecreateResponse);
  rpc FunctionPutInputs(FunctionPutInputsRequest) returns (FunctionPutInputsResponse);
  rpc FunctionPutOutputs(FunctionPutOutputsRequest) returns (google.protobuf.Empty);  // For containers to return result

  // Images
  rpc ImageGetOrCreate(ImageGetOrCreateRequest) returns (ImageGetOrCreateResponse);
  rpc ImageJoinStreaming(ImageJoinStreamingRequest) returns (stream ImageJoinStreamingResponse);

  // Mounts
  rpc MountPutFile(MountPutFileRequest) returns (MountPutFileResponse);
  rpc MountBuild(MountBuildRequest) returns (MountBuildResponse);

  // Queues
  rpc QueueCreate(QueueCreateRequest) returns (QueueCreateResponse);
  rpc QueueGet(QueueGetRequest) returns (QueueGetResponse);
  rpc QueuePut(QueuePutRequest) returns (google.protobuf.Empty);
  rpc QueueLen(QueueLenRequest) returns (QueueLenResponse);

  // Sandboxes
  rpc SandboxCreate(SandboxCreateRequest) returns (SandboxCreateResponse);
  rpc SandboxGetLogs(SandboxGetLogsRequest) returns (stream TaskLogsBatch);
  rpc SandboxWait(SandboxWaitRequest) returns (SandboxWaitResponse);
  rpc SandboxList(SandboxListRequest) returns (SandboxListResponse);

  // Secrets
  rpc SecretCreate(SecretCreateRequest) returns (SecretCreateResponse);
  rpc SecretList(SecretListRequest) returns (SecretListResponse);

  // SharedVolumes
  rpc SharedVolumeCreate(SharedVolumeCreateRequest) returns (SharedVolumeCreateResponse);
  rpc SharedVolumeList(SharedVolumeListRequest) returns (SharedVolumeListResponse);
  rpc SharedVolumeListFiles(SharedVolumeListFilesRequest) returns (SharedVolumeListFilesResponse);
  rpc SharedVolumeListFilesStream(SharedVolumeListFilesRequest) returns (stream SharedVolumeListFilesResponse);
  rpc SharedVolumePutFile(SharedVolumePutFileRequest) returns (SharedVolumePutFileResponse);
  rpc SharedVolumeGetFile(SharedVolumeGetFileRequest) returns (SharedVolumeGetFileResponse);
  rpc SharedVolumeRemoveFile(SharedVolumeRemoveFileRequest) returns (google.protobuf.Empty);

  // Tasks
  rpc TaskResult(TaskResultRequest) returns (google.protobuf.Empty);

  // Tokens (web auth flow)
  rpc TokenFlowCreate(TokenFlowCreateRequest) returns (TokenFlowCreateResponse);
  rpc TokenFlowWait(TokenFlowWaitRequest) returns (TokenFlowWaitResponse);

  // Tunnels
  rpc TunnelStart(TunnelStartRequest) returns (TunnelStartResponse);
  rpc TunnelStop(TunnelStopRequest) returns (TunnelStopResponse);

  // Volumes
  rpc VolumeCreate(VolumeCreateRequest) returns (VolumeCreateResponse);
  rpc VolumeCommit(VolumeCommitRequest) returns (google.protobuf.Empty);
  rpc VolumeGetFile(VolumeGetFileRequest) returns (VolumeGetFileResponse);
  rpc VolumeList(VolumeListRequest) returns (VolumeListResponse);
  rpc VolumeListFiles(VolumeListFilesRequest) returns (stream VolumeListFilesResponse);
  rpc VolumePutFiles(VolumePutFilesRequest) returns (google.protobuf.Empty);
  rpc VolumeReload(VolumeReloadRequest) returns (google.protobuf.Empty);
}
