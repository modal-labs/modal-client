# Copyright Modal Labs 2025
import subprocess
import tempfile

from modal.config import config
from modal.exception import NotFoundError
from modal.image import ImageBuilderVersion
from modal.mount import (
    PYTHON_STANDALONE_VERSIONS,
    Mount,
)
from modal_proto import api_pb2

REMOTE_PACKAGES_PATH = "/__modal/deps"
REMOTE_SITECUSTOMIZE_PATH = "/pkg/sitecustomize.py"

SITECUSTOMIZE_CONTENT = f"""
# This file is automatically generated by Modal.
# It ensures that Modal's python dependencies are available in the Python PATH,
# while prioritizing user-installed packages.
import sys; sys.path.append('{REMOTE_PACKAGES_PATH}')
""".strip()

def create_client_dependencies(
    builder_version: ImageBuilderVersion,
    python_version: str,
    platform: str,
    arch: str,
    uv_python_platform: str = None,
):
    profile_environment = config.get("environment")

    abi_tag = "cp" + python_version.replace(".", "")
    mount_name = f"{builder_version}-{abi_tag}-{platform}-{arch}"
    uv_python_platform = uv_python_platform or f"{arch}-{platform}"

    try:
        Mount.from_name(mount_name, namespace=api_pb2.DEPLOYMENT_NAMESPACE_GLOBAL).hydrate()
        print(f"✅ Found existing mount {mount_name} in global namespace.")
        return
    except NotFoundError:
        pass

    with tempfile.TemporaryDirectory() as tmpd:
        print(f"📦 Building {mount_name}.")
        requirements = f"modal/requirements/{builder_version}.txt"
        subprocess.run(
            [
                "uv",
                "pip",
                "install",
                "--strict",
                "--no-deps",
                "--no-cache",
                "-r",
                requirements,
                "--compile-bytecode",
                "--target",
                tmpd,
                "--python-platform",
                uv_python_platform,
                "--python-version",
                python_version,
            ],
            check=True,
            capture_output=True,
        )
        print(f"🌐 Downloaded and unpacked packages to {tmpd}.")

        python_mount = Mount._from_local_dir(tmpd, remote_path=REMOTE_PACKAGES_PATH)

        with tempfile.NamedTemporaryFile() as sitecustomize:
            sitecustomize.write(
                SITECUSTOMIZE_CONTENT.encode("utf-8"),
            )
            sitecustomize.flush()

            python_mount = python_mount.add_local_file(
                sitecustomize.name,
                remote_path=REMOTE_SITECUSTOMIZE_PATH,
            )

            python_mount._deploy(
                mount_name,
                api_pb2.DEPLOYMENT_NAMESPACE_GLOBAL,
                environment_name=profile_environment,
            )
            print(f"✅ Deployed mount {mount_name} to global namespace.")


def main(client=None):
    for python_version in PYTHON_STANDALONE_VERSIONS:
        # glibc >= 2.17
        create_client_dependencies(
            "PREVIEW",
            python_version,
            "manylinux_2_17",
            "x86_64",
        )
        # musl >= 1.2
        create_client_dependencies(
            "PREVIEW",
            python_version,
            "musllinux_1_2",
            "x86_64",
            uv_python_platform="x86_64-unknown-linux-musl"
        )

if __name__ == "__main__":
    main()
